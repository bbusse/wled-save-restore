#!/usr/bin/env bash
#
# wled-save-restore
#
# Backup and restore WLED configuration and presets
#
# Copyright (c) BjÃ¶rn Busse (bj.rn@baerlin.eu)
# SPDX-License-Identifier: BSD-3-Clause
#

set -eo pipefail

logname="wsr"
dependencies=("git" "jq" "tar" "xz")
#optional_dependencies=("matcha" "mdns-discover")

install_type_matcha="bin"
install_type_mdns_discover="bin"
url_matcha_htdocs="https://github.com/bbusse/matcha-build/releases/download/latest/matcha-htdocs.tar.xz"
url_repo_matcha="github.com/emersion/matcha/cmd/matcha@latest"
url_repo_mdns_discover="github.com/bbusse/mdns-discover@latest"

cgreen=$(tput setaf 2)
cyellow=$(tput setaf 3)
cred=$(tput setaf 1)
cclear=$(tput sgr0)

show_usage() {
    printf "\n"
    printf " wled-save-restore\n"
    printf "\n"
    printf " Usage:\n"
    printf "\n"
    printf "   wled-save-restore help                            Show usage\n"
    printf "   wled-save-restore save HOST                       Backup configuration and presets\n"
    printf "   wled-save-restore save HOST INTERVAL_MINUTES      Backup configuration and presets\n"
    printf "                                                     every x minutes\n"
    printf "   wled-save-restore restore config JSON_FILE HOST   Restore configuration\n"
    printf "   wled-save-restore restore presets JSON_FILE HOST  Restore preset\n"
    printf "\n"
    printf " Environment Variables\n"
    printf "\n"
    printf "   WSR_BACKUP_PATH           The path to save backup files to\n"
    printf "   WSR_BACKUP_INTERVAL_MINS  The backup interval in minutes\n"
    printf "   WSR_USE_GIT               Use git as backend\n"
    printf "   WSR_GIT_USER              The git user to use\n"
    printf "   WSR_GIT_MAIL              The git mail address to use\n"
    printf "   WSR_AUTODISCOVER          Use mDNS service discovery to find devices\n"
    printf "   WSR_HTTP_SERVE_BACKUPS    Serve backup files\n"
    printf "   WSR_HTTP_SERVER_ADDRESS   Server address for serving backups\n"
    printf "\n"
}

check_dependencies() {
    for dep in "${dependencies[@]}"; do
        if ! command -v "${dep}" 1>/dev/null; then
            printf "%sCould not find %s%s\n" "$cred" "${dep}" "$cclear"
            install_prompt "sys-pkg" "$dep" 0
        fi
    done
}

shutdown() {
    printf "Stopping matcha\n"
    pkill matcha
    printf "%s: Caught signal, exiting\n" "$logname"
    exit 0
}

mdns_search() {
    local r

    r=$(MDNS_SERVICE_FILTER="_wled._tcp" mdns-discover | awk '{print $3}')
    echo "$r"
}

parse_hosts() {
    local hosts
    hosts="$1"

    local a
    a=($hosts)
    echo "$a"

    set -f
    local IFS
    IFS=$'\n'
    read -a a <<< "$hosts"
    #echo "$a"
}

fetch_json() {
    local url
    url="$1"
    local format_json
    format_json="$2"
    local r

    # Formatting seems to break WLED - needs testing
    # https://github.com/Aircoookie/WLED/issues/3139
    if [ "$format_json" -eq 1 ]; then
        r=$(curl -s --output - "$url" | jq)
    else
        r=$(curl -s --output - "$url")
    fi

    echo "$r"
}

save_json() {
    local host
    host="$1"
    local path
    path="$2"
    local file
    file="$3"
    local json
    json="$4"

    local file_output
    file_output="${path}/${file}"
    local git_commit_msg
    git_commit_msg="wsr: Backup ${file} from ${host}"

    if [ -z "$json" ]; then
        printf "%swsr: No data from %s Is the host up?\n%s" "$cyellow" "$host" "$cclear"
    elif ! jq -e . >/dev/null 2>&1 <<<"$r"; then
        printf "wsr: Received data but no valid JSON from %s\n" "$host"
    else
        printf "%s" "$json" > "$file_output"
        # Got valid JSON, commit changes
        if [ "1" = "$use_git" ]; then
            printf "wsr: Saving changes for %s\n" "$host"
            git_commit "$path" "$git_commit_msg"
        fi
    fi
}

post_json() {
    local host
    host="$1"
    local file
    file="$2"
    local r

    # Make a temporary copy to original filename for upload
    cp "$HOME/.config/wled/wled_lights-bed-0.cfg.json" cfg.json

    r=$(curl -w " %{http_code}" \
             --silent \
             --request POST \
             -F name=data \
             -F filename=@cfg.json \
             -F data=@ \
             "http://$host/upload")
    echo "$r"
}

reboot_device() {
    local host
    host="$1"

    printf "wsr: Rebooting device: %s\n" "$host"
    r=$(curl --silent \
             --header "Content-Type: application/json" \
             --request POST \
             --data '{"rb":true}' \
             "http://$host/json/state")
    echo "$r"
}

save() {
    local host
    host="$1"
    local path
    path="$2"
    local use_git
    use_git="$3"
    local json_config
    local json_presets

    printf "wsr: Fetching config and presets from %s\n" "$host"
    json_config=$(fetch_json "http://$host/cfg.json" 0)
    save_json "$host" "$path" "wled_$host.cfg.json" "$json_config"
    json_presets=$(fetch_json "http://$host/presets.json" 0)
    save_json "$host" "$path" "wled_$host.presets.json" "$json_presets"
}

git_init() {
    local path
    path="$1"
    local user
    user="$2"
    local mail
    mail="$3"

    cd "$path" || exit 1

    r=$(git rev-parse --is-inside-work-tree 2>/dev/null)

    if [ "$r" != "true" ]; then
        printf "%s\n" "wsr: Creating repository"
        git init >/dev/null 2>&1
        git config user.name "$user"
        git config user.email "$mail"
        git config init.defaultBranch main
    fi
}

git_ignore() {
    local path
    path="$1"
    local ignore
    ignore="$2"

    printf "%s\n" "$ignore" > .gitignore
    git config advice.addIgnoredFile false
}

git_commit() {
    local path
    path="$1"
    local msg
    msg="$2"

    cd "$path" || exit 1

    git add .
    git commit -m "$msg"
}

sys_os() {
    echo $(awk -F'=' '/^ID/ {print $2}' /etc/os-release)
}

sys_arch() {
    local os
    os=$(sys_os)

    local arch

    case $os in
    freebsd)
        arch=$(uname -p)
        ;;
    fedora)
        ;&
    debian)
        ;&
    ubuntu)
        arch=$(uname -m)
        ;;
    esac

    case "$arch" in
        aarch64)
        arch="arm64"
        ;;
        i686)
        arch="i386"
        ;;
    esac

    echo "$arch"
}

sys_info() {
    local os
    os=$(sys_os)
    local arch
    arch=$(sys_arch)

    printf "wsr: Running on %s (%s)\n" "$os" "$arch"
}

install() {
    local install_type
    install_type="$1"
    local pkg
    pkg="$2"
    local url
    url="$3"

    case "$install_type" in
    bin)
        install_bin "$pkg" "$url" "/usr/local/bin" "$optional"
        ;;
    go-src)
        go_install "$pkg" "$url"
        ;;
    sys-pkg)
        sys_install "$pkg"
        ;;
    esac
}

# Install binary from remote location
install_bin() {
    local pkg
    pkg="$1"
    local url
    url="$2"
    local install_path
    install_path="$3"
    local optional
    optional="$4"

    local tmp_path
    tmp_path="/tmp"
    local pkg_archive
    pkg_archive=$(echo ${url} | awk -F'/' '{print $NF}')

    local suffix
    suffix0=$(echo "$pkg_archive" | awk -F'.' '{print $NF}')
    suffix1=$(echo "$pkg_archive" | awk -F'.' '{print $(NF-1)}')

    local compressed
    local archive
    compressed=0
    archive=0

    printf "%s: Installing %s to %s\n" "$logname" "$pkg" "$install_path"
    if ! curl -sS -LO --output-dir "$tmp_path" "$url"; then
        printf "%s%s: Failed to fetch %s from %s\n%s" "$cred" "$logname" "$pkg" "$url" "$cclear"
        exit 1
    fi

    if [ "tar" = "$suffix1" ] && [ "xz" = "$suffix0" ]; then
        compressed=1
        archive=1
        mv "${tmp_path}/${pkg_archive}" "${tmp_path}/${pkg}.tar.xz"
        pkg_archive="${pkg}.tar.xz"

    elif [ "xz" = "$suffix0" ]; then
        compressed=1
        archive=0
    fi

    if [ "$compressed" -eq 1 ] && [ "$archive" -eq 1 ]; then
        cd "$tmp_path"
        printf "%s: Extracting %s archive\n" "$logname" "$pkg"
        if ! tar xf "$tmp_path/$pkg_archive"; then
            printf "%s: Failed to extract %s\n" "$logname" "$pkg"
            exit 1
        fi
    elif [ "$compressed" -eq 1 ] && [ "$archive" -eq 0 ]; then
        cd "$tmp_path"
        printf "%s: Extracting %s\n" "$logname" "$pkg"
        if ! xz -fd "$tmp_path/$pkg_archive"; then
            printf "%s: Failed to extract %s\n" "$logname" "$pkg"
            exit 1
        fi
    fi

    if [ "matcha" = "$pkg" ]; then
        if stat "$tmp_path/cmd/matcha/matcha" >/dev/null 2>&1; then
            sudo cp $tmp_path/cmd/matcha/matcha "$install_path"
        else
            printf "%s%s: Failed to install %s\n%s" "$cred" "$logname" "$pkg" "$cclear"
        fi
    else
        if stat "$tmp_path/$pkg" >/dev/null 2>&1; then
            sudo cp "$tmp_path/$pkg" "$install_path"
        else
            printf "%s%s: Failed to install %s\n%s" "$cred" "$logname" "$pkg" "$cclear"
        fi
    fi
}

# Use system package manager for installation
sys_install() {
    local pname
    pname="$1"
    local pkg
    pkg="$2"

    local os
    os=$(sys_os)

    case $os in
    freebsd)
        sudo pkg install $pkg
        ;;
    fedora)
        sudo dnf install $pkg
        ;;
    debian)
        ;&
    ubuntu)
        sudo apt install $pkg
        ;;
    esac
}

install_prompt() {
    local install_type
    install_type="$1"
    local pkg
    pkg="$2"
    local url
    url="$3"
    local optional
    optional="$4"

    printf "%s%s: Can not find %s\n%s" "$cyellow" "$logname" "$pkg" "$cclear"

    if [ "$optional" -eq 1 ]; then
        printf "%s%s: The installation of %s is optional\n%s" "$cyellow" "$logname" "$pkg" "$cclear"
    fi

    local prompt
    prompt=$(printf "%s: Do you want to install %s? Y/n " "$logname" "$pkg")
    local answer

    while true; do
        read -p "$prompt" answer
        case $answer in
            "")
            ;&
            [Yy]* )
              install "$install_type" "$pkg" "$url"
              break;;
            [Nn]* )
              exit;;
            * ) echo "Please answer yes or no";;
        esac
    done
}

go_install() {
    local pname
    pname="$1"
    local pkg
    pkg="$2"
    local path
    path="$3"
    local opt
    opt="$4"


    local prompt
    prompt=$(printf "%s: Do you want to install %s? Y/n " "$pname" "$pkg")
    local answer

    while true; do
        read -p "$prompt" answer
        case $answer in
            "")
            ;&
            [Yy]* )
              go install "$path"
              break;;
            [Nn]* )
              exit;;
            * ) echo "Please answer yes or no.";;
        esac
    done
}

noautodiscover_abort() {
    local url
    url="$1"

    printf "%s\n" "wsr: mdns-discover not found. Skipping autodiscovery"
    printf "%s\n" "wsr: You can install it with:"
    printf "%s\n" "wsr: \`go install $url_repo_mdns_discover\`"
    printf "%s\n" "wsr: Please specify a host to connect to"
    printf "%s\n" "wsr: Aborting.."
    exit 1
}

autodiscover_fail_abort() {
    printf "%s%s: Autodiscovery found no devices\n%s" "$cyellow" "$logname" "$cclear"
    printf "%s: Please specify a host to connect to\n" "$logname"
    printf "%s\n" "wsr: Aborting.."
    exit 1
}

prepare_webroot() {
    local path
    path="$1"
    local pkg_archive
    pkg_archive="/tmp/matcha-htdocs.tar.xz"

    if cd "$path"; then
        # Fetch matcha htdocs
        if ! curl -sS -LO --output-dir /tmp "${url_matcha_htdocs}"; then
            printf "%swsr: Failed to fetch htdocs from %s\n%s" "$cred" "${url_matcha_htdocs}" "$cclear"
            exit 1
        fi

        if ! tar xf "$pkg_archive"; then
            printf "wsr: Failed to extract htdocs\n"
            exit 1
        fi
    fi
}

prepare_webserver() {
    local path
    path="$1"

    if ! command -v "matcha" >/dev/null 2>&1; then
        local arch
        arch=$(sys_arch)
        url="https://github.com/bbusse/matcha-build/releases/download/latest/matcha-linux-${arch}-latest.tar.xz"
        install_prompt "$install_type_matcha" "matcha" "${url}" 1
    fi

    # Fetch and extract htdocs
    prepare_webroot "$path"
}

start_webserver() {
    local address
    address="$1"
    local path
    path="$2"

    cd "$path" || exit 1

    prepare_webserver "$path"
    ADDRESS="${address}"
    matcha "$path" &
    printf "wsr: Serving %s\n" "$path"
    printf "wsr: Backups available at: http://%s\n" "$address"
}

main() {
    local action
    action="$1"
    local path
    path="${WSR_BACKUP_PATH:=$HOME/.config/wled}"
    local use_git
    use_git="${WSR_USE_GIT:=1}"
    local git_user
    git_user="${WSR_GIT_USER:=wsr}"
    local git_mail
    git_mail="${WSR_GIT_MAIL:=wsr@localhost}"
    local serve_files
    serve_files="${WSR_HTTP_SERVE_FILES:=1}"
    local server_address
    server_address="${WSR_HTTP_ADDRESS:=[::1]:8080}"

    # We use autodiscover if no host are supplied
    # on the command line
    local use_autodiscover
    use_autodiscover=0

    sys_info

    if [ -z "$action" ]; then
        show_usage
        printf "wsr: Please specify an action: One of 'save' or 'restore'\n"
        printf "wsr: Aborting..\n"
        exit 1
    fi

    check_dependencies

    if [ "help" = "$action" ]; then
        show_usage
        exit 0
    fi

    mkdir -p "$path"

    if [ "$use_git" -eq 1 ]; then
        git_init "$path" "$git_user" "$git_mail"
        git_ignore "$path" ".gitignore"
        git_ignore "$path" "matcha"
        git_ignore "$path" "public/"
    fi

    # Restore config or presets
    if [ "restore" = "$action" ]; then
        local what
        what="$2"
        local file
        file="$3"

        if [ "presets" != "$what" ] && [ "config" != "$what" ]; then
            if [ -z "$what" ]; then
                printf "wsr: Please specify a resource to restore: One of presets or config\n"
                printf "wsr: Aborting..\n"
                exit 1
            else
                printf "wsr: %s is not a valid resource: Must be one of presets or config\n" "$what"
                printf "wsr: Aborting..\n"
                exit 1
            fi
        fi

        if [ -z "$file" ]; then
            printf "wsr: Please specify a file to restore\n"
            printf "wsr: Aborting..\n"
            exit 1
        fi

        local host
        host="$4"

        if [ -z "$host" ]; then
            printf "wsr: Please specify a host to connect to\n"
            printf "wsr: Aborting..\n"
            exit 1
        fi

        printf "wsr: Restoring %s %s to %s\n" "$what" "$file" "$host"
        r=$(post_json "$host" "$file")
        printf "wsr: %s\n" "$r"
        r=$(reboot_device "$host")
        printf "wsr: %s\n" "$r"

        # Remove temporary copy
        rm cfg.json
        printf "wsr: Done\n"
        exit 0

    # Backup config and presets: one-shot or periodically
    elif [ "save" = "$action" ] || [ "save-periodically" = "$action" ]; then
        local hosts

        if [ "save" = "$action" ]; then
            hosts="${@:2:23}"
        else
            hosts="${@:3:23}"
        fi

        if [ -z "$hosts" ]; then
            if ! command -v mdns-discover 1>/dev/null; then
                local url
                local arch
                arch=$(sys_arch)
                url="https://github.com/bbusse/mdns-discover/releases/download/latest/mdns-discover-linux-${arch}-latest.tar.xz"
                install_prompt "$install_type_mdns_discover" "mdns-discover" "$url" 1
                if ! command -v "mdns-discover" 1>/dev/null; then
                    noautodiscover_abort
                fi
                use_autodiscover=1
            fi

            printf "%s%s: Looking for devices..\n%s" "$cgreen" "$logname" "$cclear"
            hosts=$(mdns_search)
            if [ -n "$hosts" ]; then
                printf "wsr: Found devices:\n%s\n" "$hosts"
            else
                # Fail if no devices found
                autodiscover_fail_abort
            fi
        fi
    fi

    # Backup config and presets: one-shot
    if [ "save" = "$action" ]; then
        for host in ${hosts[@]}; do
            save "$host" "$path" "$use_git"
        done

    # Backup config and presets: periodically
    elif [ "save-periodically" = "$action" ]; then
        local t_interval_mins
        t_interval_mins="$2"
        local t_start
        t_start=$(date -u)

        # Start webserver
        if [ "$serve_files" -eq 1 ]; then
            start_webserver "$server_address" "$path"
        fi

        if [ -z "$t_interval_mins" ]; then
            # No interval given, use default
            t_interval_mins=${WSR_BACKUP_INTERVAL_MINS:=3600}
            printf "wsr: No interval given, defaulting to %s minutes\n" "$WSR_BACKUP_INTERVAL_MINS"
        fi

        if ! [ "$t_interval_mins" -gt 0 ] 2> /dev/null; then
            printf "wsr: Invalid interval: %s. Need a number in minutes\n" "$t_interval_mins"
            printf "wsr: Aborting..\n"
            exit 1
        else
            local t_interval_seconds
            t_interval_seconds=$((t_interval_mins * 60))
            declare -i n=0
            declare -i next=0

            # Catch signals to also terminate matcha
            trap shutdown 1 2 3 6

            # Backup data periodically with given interval
            # Use results from autodiscovery if hosts not given explicitly
            while true; do
                n+=1

                if [ "$use_autodiscover" -eq 1 ]; then
                    # We found devices initially,
                    # do not not fail if we do not find any now
                    if [ "$n" -gt 1 ]; then
                        hosts=$(mdns_search)
                    fi
                fi

                for host in ${hosts[@]}; do
                    save "$host" "$path" "$use_git"
                done

                next=n+1
                printf "%swsr: >>> Next backup (%s) in %s second(s)%s\n" \
                       "$cgreen" \
                       "$next" \
                       "$t_interval_seconds" \
                       "$cclear"
                printf "wsr: >>> Backing up %s device(s)\n" "${#hosts[@]}"
                printf "wsr: >>> Running since %s\n" "$t_start"

                sleep $t_interval_seconds
            done
        fi
    fi
}

main "$@"
